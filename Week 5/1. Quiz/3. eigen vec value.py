#Eigenvectors - Note, the eigenvectors are the columns of the output.
M = np.array([[1, 0, 0],
              [0, 2, 0],
              [0, 0, 3]])
vals, vecs = np.linalg.eig(M)
vecs
[[ 1.  0.  0.]
 [ 0.  1.  0.]
 [ 0.  0.  1.]]

# Q. 1
M = np.array([[4,     -5,  6],
              [7,     -8,  6],
              [3/2, -1/2, -2]])
vals, vecs = np.linalg.eig(M)
vecs
[[ 3. -2.  1.]
 [ 3. -2. -1.]
 [ 1.  1. -2.]]

# Q. 2
M = np.array([[0, 0, 0, 1],
              [1, 0, 0, 0],
              [0, 1, 0, 0],
              [0, 0, 1, 0]])
vals, vecs = np.linalg.eig(M)
vecs
[[-1.+0.j  1.+0.j  1.+0.j  1.-0.j]
 [ 1.+0.j -0.-1.j -0.+1.j  1.-0.j]
 [-1.+0.j -1.-0.j -1.+0.j  1.-0.j]
 [ 1.+0.j -0.+1.j -0.-1.j  1.-0.j]]
vals # [-1.+0.j  0.+1.j  0.-1.j  1.+0.j]

# Q.3
M = np.array([[0.1, 0.1, 0.1, 0.7],
              [0.7, 0.1, 0.1, 0.1],
              [0.1, 0.7, 0.1, 0.1],
              [0.1, 0.1, 0.7, 0.1]])
vals, vecs = np.linalg.eig(M)
vecs
[[ 1.+0.j  1.+0.j  1.+0.j  1.+0.j]
 [ 1.+0.j -1.+0.j -0.-1.j -0.+1.j]
 [ 1.+0.j  1.+0.j -1.+0.j -1.-0.j]
 [ 1.+0.j -1.+0.j  0.+1.j  0.-1.j]]
vals # [ 1.0+0.j  -0.6+0.j   0.0+0.6j  0.0-0.6j]

# Q. 4
M = np.array([[0, 1, 0, 0],
              [1, 0, 0, 0],
              [0, 0, 0, 1],
              [0, 0, 1, 0]])
vals, vecs = np.linalg.eig(M)
vecs
[[ 1. -1.  0.  0.]
 [ 1.  1.  0.  0.]
 [ 0.  0.  1. -1.]
 [ 0.  0.  1.  1.]]
vals # [ 1. -1.  1. -1.]

# Q. 5
M = np.array([[0.1, 0.7, 0.1, 0.1],
              [0.7, 0.1, 0.1, 0.1],
              [0.1, 0.1, 0.1, 0.7],
              [0.1, 0.1, 0.7, 0.1]])
vals, vecs = np.linalg.eig(M)
vecs
[[  1.     -1.      1.      1.   ]
 [ -1.     -1.      1.     -1.   ]
 [ -0.      1.      1.    -10.712]
 [  0.      1.      1.     10.712]]
vals # [-0.6  0.6  1.  -0.6]